@PACKAGE_INIT@


## Define basic variables
# Defined components in the project
set(Spglib_Supported_Comps static shared omp fortran)
# Define deprecated components. For each deprecated component define ${comp}_Replacement
set(Spglib_Deprecated_Comps "")
set(Spglib_VERSION_FULL @Spglib_VERSION_FULL@)
set(Spglib_COMMIT @Spglib_COMMIT@)
set(Spglib_Fortran @SPGLIB_WITH_Fortran@)
set(Spglib_Python @SPGLIB_WITH_Python@)
set(Spglib_OMP @SPGLIB_USE_OMP@)
set(Spglib_LIB_TYPE @SPGLIB_LIB_TYPE@)

## Parse find_package request

if (NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/PackageCompsHelper.cmake)
	message(WARNING "Missing helper file PackageCompsHelper.cmake")
	set(Spglib_FOUND FALSE)
	return()
endif ()

include(${CMAKE_CURRENT_LIST_DIR}/PackageCompsHelper.cmake)
find_package_with_comps(PACKAGE Spglib PRINT LOAD_ALL_DEFAULT HAVE_GLOBAL_SHARED_STATIC)

check_required_components(Spglib)

get_property(languages GLOBAL PROPERTY ENABLED_LANGUAGES)
# For Fortran targets, check that the modules are usable with the current compiler
if (Fortran IN_LIST languages AND TARGET Spglib::fortran_mod)
	# TODO: CMake 3.25 use the modern try_compile signature. Remove the explicit CMakeScratch
	try_compile(spglib_fortran_try_compile ${CMAKE_BINARY_DIR}/CMakeFiles/CMakeScratch/spglib_fortran
			SOURCES ${CMAKE_CURRENT_LIST_DIR}/try_compile.f90
			LINK_LIBRARIES Spglib::fortran_mod
	)
	if (spglib_fortran_try_compile)
		# If the compilation was successful, use the module version of the library
		add_library(Spglib::fortran ALIAS Spglib::fortran_mod)
	else ()
		# Otherwise, assume it was because of incompatible compiler
		# Add the bundled `.f90` files as sources instead
		add_library(Spglib::fortran ALIAS Spglib::fortran_include)
	endif ()
endif ()
