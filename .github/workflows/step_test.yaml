name: test
run-name: Run tests

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:

permissions:
  contents: read

jobs:
  pre-commit:
    name: Check pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: pre-commit/action@v3.0.0

  tests:
    name: Check ${{ matrix.toolchain }} and Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    container: ${{ !matrix.os && 'ghcr.io/lecrisut/dev-env:main' || '' }}
    needs: [ pre-commit ]
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ gcc, llvm, intel, windows, macos ]
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12"]
        include:
          - os: windows-latest
            toolchain: windows
          - os: macos-11
            toolchain: macos
          - python-version: "3.12"
            experimental: true
            pip-extra-flags: --pre
    steps:
      - name: Enable msvc toolchain on windows
        uses: ilammy/msvc-dev-cmd@v1
        if: contains(matrix.os, 'windows')
      - name: Activate Intel compilers
        # Not elegant, it will propagate all environment variable.
        # Intel does not provide a way to output the environment variables to a file
        # Note: PATH needs to be exported to GITHUB_PATH otherwise it can be overwritten
        run: |
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
          echo $PATH >> $GITHUB_PATH
        if: matrix.toolchain == 'intel'
      - uses: actions/checkout@v3
      - name: Patch /etc/lsb-release for experimental python
        # Mimic Ubuntu in order to be able to download experimental python
        run : |
          echo -en 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=22.04\nDISTRIB_CODENAME=jammy\nDISTRIB_DESCRIPTION="Ubuntu 22.04.3 LTS"' >> /etc/lsb-release
        if: ${{ !matrix.os && matrix.experimental }}
      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
        # TODO: Replace with editable install once configure presets are available
      - name: Install python bindings
        run: python3 -m pip install  ${{ matrix.pip-extra-flags }} .[test]
      - uses: lukka/get-cmake@latest
      - name: Run CMake configuration for ${{ matrix.toolchain }} toolchain
        uses: lukka/run-cmake@v10.3
        with:
          workflowPreset: "${{ matrix.toolchain }}-ci"

  coverage:
    name: Check ${{ matrix.coverage_api }} API test coverage
    runs-on: ubuntu-latest
    needs: [ tests ]
    strategy:
      matrix:
        coverage: [ unit_tests, c_api, fortran_api ]
    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      - name: Get test coverage for ${{ matrix.coverage }}
        uses: lukka/run-cmake@v10.3
        with:
          workflowPreset: "ci-coverage-${{ matrix.coverage }}"
      - name: Get lcov data
        uses: danielealbano/lcov-action@v3
        with:
          # Note lcov-action prepends and appends wild-cards *. Account for those
          # https://github.com/danielealbano/lcov-action/issues/11
          remove_patterns: /test/,/cmake-build*/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: ${{ matrix.coverage }} coverage
          files: coverage.info
          flags: ${{ matrix.coverage }}
          verbose: true

  coverage-pytest:
    name: Run python tests with coverage
    runs-on: ubuntu-latest
    needs: [ tests ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          cache: pip
      - name: Setup spglib
        run: |
          python -m pip install --upgrade pip
          pip install .[test-cov] \
             --config-settings=cmake.define.CMAKE_C_COMPILER=gcc \
             --config-settings=cmake.define.SPGLIB_TEST_COVERAGE=ON \
             --config-settings=build-dir=build
      - name: Test pytest with coverage
        run: pytest --cov=spglib
      - name: Get lcov data
        uses: danielealbano/lcov-action@v3
        with:
          # Note lcov-action prepends and appends wild-cards *. Account for those
          # https://github.com/danielealbano/lcov-action/issues/11
          remove_patterns: /test/,/cmake-build*/,/tmp/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: python api coverage
          files: coverage.info,.coverage
          flags: python_api
          verbose: true
