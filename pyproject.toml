[build-system]
requires = ["scikit-build-core", "numpy"]
build-backend = "scikit_build_core.build"

[project]
name = "spglib"
requires-python = ">=3.8"
description = "This is the spglib module."
license = { text = "BSD-3-Clause" }
license-files = { paths = ["COPYING"] }
readme = "python/README.rst"
dynamic = ["version"]
dependencies = [
    "numpy>=1.20",
    "typing-extensions>=4.9.0; python_version<'3.13'",
    "importlib-resources; python_version<'3.10'",
]
authors = [
    {name="Atsushi Togo", email="atz.togo@gmail.com"},
]
maintainers = [
    {name="Atsushi Togo", email="atz.togo@gmail.com"},
    {name="Cristian Le", email="git@lecris.dev"},
    {name="Kohei Shinohara", email="kshinohara0508@gmail.com"},
]
classifiers = [
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Science/Research",
    "Programming Language :: C",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: C",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 5 - Production/Stable",
]

[project.urls]
homepage = "https://spglib.readthedocs.io/"
documentation = "https://spglib.readthedocs.io/"
repository = "https://github.com/spglib/spglib"
changelog = "https://spglib.readthedocs.io/en/latest/releases.html"

[project.optional-dependencies]
test = [
    "pytest",
    "pyyaml",
]
docs = [
    "Sphinx >= 7.0",
    "sphinxcontrib-bibtex >= 2.5",
    "sphinx-book-theme",
    "sphinx-autodoc2",
    "myst-parser >= 2.0",
    "linkify-it-py",
]
test-cov = [
    "spglib[test]",
    "pytest-cov",
]
test-benchmark = [
    "spglib[test]",
    "pytest-benchmark",
]
dev = [
    "spglib[test]",
    "pre-commit",
]
# Alternative names for compatibility
doc = [
    "spglib[docs]",
]
testing = [
    "spglib[test]",
]

[tool.scikit-build]
wheel.packages = ["python/spglib"]
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["python/spglib/_version.py"]

[tool.scikit-build.cmake.define]
SPGLIB_WITH_Python = "ON"
SPGLIB_WITH_TESTS = "OFF"
SPGLIB_USE_OMP = "OFF"

[tool.setuptools_scm]
write_to = "python/spglib/_version.py"

[tool.cibuildwheel]
# pp, win32, i686, muslinux: Remove 32bit variants, PyPY interpreter and unnecessary musl variant
skip = ["pp*", "*-win32", "*-manylinux_i686", "*-musllinux*"]
test-extras = "test"
test-command = "pytest {package}/test/functional/python"

[tool.cibuildwheel.linux]
# TODO: auditwheel fails if LD_LIBRARY_PATH is not set correctly. Not sure about apprropriate value to set to
#repair-wheel-command = "LD_LIBRARY_PATH=. auditwheel repair --lib-sdir . -w {dest_dir} {wheel}"
repair-wheel-command = ""

[tool.cibuildwheel.macos]
# TODO: similar to above
#repair-wheel-command = "DYLD_LIBRARY_PATH=. delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
repair-wheel-command = ""

[tool.pytest.ini_options]
addopts = "-m 'not benchmark'"
testpaths = ["test/functional/python"]
markers = [
    # Define benchmark marker to avoid warnings of marker not defined
    "benchmark: benchmarking tets",
]

[tool.coverage.run]
command_line = '-m pytest'
# TODO: Cannot report relative to project path because we cannot do editable installs yet
#source = ['python/spglib']
source = ['spglib']

[tool.ruff]
line-length = 88
extend-select = [
    "F",           # pyflakes
    # "W",           # pycodestyle-warnings
    "E",           # pycodestyle-errors
    # "C90",         # mccabe
    "I",           # isort
    # "N",           # pep8-naming
    "D",           # pydocstyle
    # "UP",          # pyupgrade
    # "YTT",         # flake8-2020
    # "ANN",         # flake8-annotations
    # "S",           # flake8-bandit
    # "BLE",         # flake8-blind-except
    # "FBT",         # flake8-boolean-trap
    # "B",           # flake8-bugbear
    # "A",           # flake8-builtins
    # "COM",         # flake8-comma
    # "C4",          # flake8-comprehensions
    # "T10",         # flake8-debugger
    # "EM",          # flake8-errmsg
    # "FA",          # flake8-future-annotations
    # "ISC",         # flake8-implicit-str-concat
    # "ICN",         # flake8-import-conventions
    # "G",           # flake8-logging-format
    # "PIE",         # flake8-pie
    # "T20",         # flake8-print
    # "PYI",         # flake8-pyi
    # "PT",          # flake8-pytest-style
    # "Q",           # flake8-quotes
    # "RSE",         # flake8-raise
    # "RET",         # flake8-return
    # "SLF",         # flake8-self
    # "SIM",         # flake8-simplify
    # "TID",         # flake8-tidy-imports
    # "TCH",         # flake8-type-checking
    # "ARG",         # flake8-unused-arguments
    # "PTH",         # flake8-use-pathlib
    # "TD",          # flake8-todos
    # "ERA",         # eradicate
    # "PD",          # pandas-vet
    # "PGH",         # pygrep-hooks
    # "PL",          # pylint
    # "TRY",         # tryceratops
    # "FLY",         # flynt
    # "NPY",         # NumPy
    # "PERF",        # perflint
    # "FURB",        # refurb
    # "RUF",         # Ruff-specific
]
extend-ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D203",  # Confilct with D211
    "D205",
    "D213",  # Conflict with D212
]
exclude = [
    "database",
]

[tool.mypy]
mypy_path = ["python"]
files = ["python", "test/functional/python", "example/python_api"]
python_version = "3.12"
warn_unused_configs = true
show_error_codes = true
# TODO: Enable strict mode once we clean up type annotations
# strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
no_strict_optional = true

[tool.codespell]
ignore-words = "docs/codespell.txt"
skip = "docs/references.bib"

[tool.check-wheel-contents]
ignore = "W002"
