name: test

on:
  workflow_call:
    inputs:
      mask-experimental:
        type: boolean
        default: true
        description: Always report experimental test as successful
      cmake-version:
        type: string
        required: true
        description: CMake version to test in the cmake-version test matrix

permissions:
  contents: read

jobs:
  tests:
    name: >
      üñ•Ô∏è ${{ matrix.os || 'Fedora' }} +
      ${{ !matrix.os && format('üõ†Ô∏è {0} +', matrix.toolchain) || '' }}
      üêç ${{ matrix.python-version }}
      ${{ matrix.experimental && '[üß™ Experimental]' || '' }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    container: ${{ !matrix.os && 'ghcr.io/lecrisut/dev-env:main' || '' }}
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ gcc, llvm, intel ]
        python-version: [ "3.8", "3.x" ]
        include:
#          - os: windows-2019
#            toolchain: windows
#            python-version: "3.x"
          - os: macos-11
            toolchain: macos
            python-version: "3.x"
          - os: windows-latest
            toolchain: windows
            python-version: "3.x"
            experimental: true
          - os: macos-latest
            toolchain: macos
            python-version: "3.x"
            experimental: true
#          - python-version: "3.13"
#            experimental: true
#            pre: true
    steps:
      - name: Enable msvc toolchain on windows
        uses: ilammy/msvc-dev-cmd@v1
        if: contains(matrix.os, 'windows')
      - name: Activate Intel compilers
        # Not elegant, it will propagate all environment variable.
        # Intel does not provide a way to output the environment variables to a file
        # Note: PATH needs to be exported to GITHUB_PATH otherwise it can be overwritten
        run: |
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
          echo $PATH >> $GITHUB_PATH
        if: matrix.toolchain == 'intel'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # workaround for https://github.com/actions/runner/issues/2033
      - name: ownership workaround
        run: git config --system --add safe.directory '*'
      - name: Patch /etc/lsb-release for experimental python
        # Mimic Ubuntu in order to be able to download experimental python
        run: |
          echo -en 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=22.04\nDISTRIB_CODENAME=jammy\nDISTRIB_DESCRIPTION="Ubuntu 22.04.3 LTS"' >> /etc/lsb-release
        if: ${{ !matrix.os && matrix.pre }}
      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: ${{ matrix.pre || false }}
      - name: Install dependencies
        run: |
          python3 -m pip install pip-tools
          pip-compile --extra=test --strip-extras pyproject.toml ${{ matrix.pre && '--pre' }}
          python3 -m pip install -r requirements.txt
      - uses: lukka/get-cmake@latest
      - name: Run CMake configuration for ${{ matrix.toolchain }} toolchain
        uses: lukka/run-cmake@v10.3
        with:
          workflowPreset: "${{ matrix.toolchain }}-ci"
        continue-on-error: ${{ matrix.experimental && inputs.mask-experimental}}
  cmake-version:
    name: >
      üî® CMake ${{ matrix.cmake }}
      ${{ matrix.experimental && '[üß™ Experimental]' || '' }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        cmake: [ "${{ inputs.cmake-version }}" , "latest", "latestrc" ]
        include:
          - cmake: latestrc
            experimental: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          python3 -m pip install pip-tools
          pip-compile --extra=test --strip-extras pyproject.toml ${{ matrix.pre && '--pre' }}
          python3 -m pip install -r requirements.txt
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ matrix.cmake }}
      - name: Run CMake workflow
        uses: lukka/run-cmake@v10.3
        with:
          workflowPreset: gcc-ci
        continue-on-error: ${{ matrix.experimental && inputs.mask-experimental}}
        if: matrix.cmake != '3.20'
      - name: Run CMake manually
        # Need CMake 3.25 to properly use the presets
        run: |
          cmake -B ./build -G Ninja \
            -DSPGLIB_WITH_Fortran=ON \
            -DSPGLIB_WITH_TESTS=ON \
            -DSPGLIB_WITH_Python=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_C_COMPILER=g++ \
            -DCMAKE_C_COMPILER=gfortran
          cmake --build ./build
          ctest --test-dir ./build -j $(nproc) --output-on-failure
        continue-on-error: ${{ matrix.experimental && inputs.mask-experimental}}
        if: matrix.cmake == '3.20'
  sanitizer:
    name: >
      üßπ ${{ matrix.sanitizer }} +
      üõ†Ô∏è ${{ matrix.toolchain }}
    runs-on: ubuntu-latest
    container: ghcr.io/lecrisut/dev-env:main
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ gcc, llvm ]
        sanitizer: [ address ]
    env:
      SPGLIB_SANITIZER: ${{ matrix.sanitizer }}
    steps:
      # Temporary workaround for missing pip in container
      - run: dnf install -y python3-pip python3-devel
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest
      - name: Run CMake configuration for ${{ matrix.toolchain }} toolchain
        uses: lukka/run-cmake@v10.3
        with:
          workflowPreset: "${{ matrix.toolchain }}-ci-sanitizer"
